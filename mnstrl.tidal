# SuperDirt.start;

# s.options.numBuffers = 1024 * 16;

# SuperDirt: listening to Tidal on port 57120

{-----------------_-----------------_-----------------_-----------------}

d1 $ sound "bd"

d3 $ rarely (jux (stut 2 1 (-0.5))) $
	stack [
		sound "bd",
        sound "[[cp cp] ~ cp ~]",
        sound "~ ~ sn ~",
        sound "hh(3,8)"
    ]

d3 $ stack[
  every 4 (0.25 <~) $jux (iter 4) $ degrade $ sound "[bd, 808bd*8, bd:3]"# accelerate "-1"# speed "2",
  sometimes (rev) $jux (iter 4) $ sound "[bd, 808bd*8, bassdm]"|+| speed (slow 4 $ scale 1 1.5 sine),
  every 4 (0.25 <~) $jux (iter 4)$ sound (samples "gabbaloud future jvbass:2 invaders" (run 8))#gain 1.2
  ]

d3 $ (# nudge (slow 64 $ scale 0 3 $ sine)) $
(# hpf (slow 65 $ scale 20 200 $ sine)) $
(# delay (slow 66 $ sine)) $
(# delayt (slow 67 $ scale 0.001 0.008 $ sine)) $
(# delayfb (slow 68 $ sine)) $
iter 4 $
every 15 (16~>) $
fast 8 $
s (randcat["numbers:1","numbers:2","numbers:3","numbers:4","numbers:5"])
# cut (choose[0,1])
# begin (scale 0.2 0.23 $ rand)
# pan rand
# lpf (scale 20 20000 $ rand)
# gain (scale 1.5 2 $ rand)
# up (choose [0,-3,-6,-9,-12])
# rel (scale 0.1 0.2 $ rand)

hush

d3 $ stack [
  sound "drum:0*2 drum:1*2 hh:2/3 drum:5/2" # gain 0.9,
  every 4 (rev) $ sound "mouth*4" # n (run 8) # gain 1.1,
  smash 2 [4,1,2,8] $ sound "drum:7*3" # pan sine1 # gain 0.8
]

d3 $ stack [
sound "[ifdrums(5,8), techno:1*2]",
sometimes (degradeBy 0.5) $ sound "hh27*4" # n (irand 4),
sound "wobble ~ jazz:0 jazz:1" # speed "0.5 0.75 2.5" # pan rand,
sound (samples "amencutup" (every 2 (density 1.2) $ density 1.33 $ run 38))# speed "2.0 3.0 0.75 0.9" #gain "1"
]

d3 $ rarely (|=| pan (rand)) $
superimpose (slow 2 . (|*| speed "0.5")) $
foldEvery [2,3] (0.125 ~>) $
within (0.25, 0.5) (stut' 5 (0.0625) ((|*| gain "0.8") . (|*| speed "1.5"))) $
s "{bd dr:3/2 dr}%8" # shape "0.4" # end "0.5" # speed "2"

d3 $ ifp (<9) (|*| speed 1.0) (|*| speed 1.5)
$ slow 1.45 $ stack[
sound "{~ ~ ~ ~ ~ ~ ~ ~, jvbass jvbass jvbass jvbass jvbass jvbass jvbass}" # up "{~ ~ ~ ~ ~ ~ ~ ~,0 3 0 5 0 7 5}" # pan "0.25",
ifp (<3) (# gain "0.0") (# gain "0.9")  $ (|*| speed "2.0") $ sound "{~ ~ ~ ~ ~ ~ ~ ~, jvbass jvbass jvbass jvbass jvbass jvbass}" # up "{~ ~ ~ ~ ~ ~ ~ ~,0 3 0 5 0 7}" # pan "0.75"
]

d3 $ density 0.5
$ every 4 (|-| speed "{0.0 0.25 -0.25 0.0 0.0}%8")
$ every 16 (density 2)
$ every 8 (|+| speed "-0.3")
$ whenmod 5 4 (stut 4 0.5 (-0.2))
$ every 16 (within (0, 0.4) (fast 0.5))
$ every 16 (|+| accelerate "-2")
$ stack [
sound "[bd bd sn bd]" # speed 0.8 # accelerate 2,
sound "[ [hc:2 ~ hc:2] [~ hc:2 hc:2] [~ hc:2 ~] [hc:2 ~ hc:2]]" # speed 1,
sound "[[cp:4 ~ cp:4] ~ ~ ~ ]" # speed 0.9,
sound "[glitch:2 ~  ~  glitch:2]" # speed 1.4
] # shape (0.1)

{-----------------_-----------------_-----------------_-----------------}
hush

d1 $ sound "bd sn hh cp mt arpy drum odx bd arpy bass2 feel future"
d3 $ sound "bd sn hh cp hh arpy drum hh bd arpy bass2 feel future"
d3 $ sound "bd sn hh cp hh arpy drum hh bd arpy bass2 hh hh hh"
d1 $ sound "bd*2 sn*2"
d2 $ rev $ sound "hh*8 . hh*3 "

d2 $ every 2 (rev) $ (sound "hh hh*2 . hh*2 . hh*2")
d1 $ every 4 (rev) $ ( sound "bd bd:0*2 bd:1*2 bd:3*2" )

d1 silence
d1 $ sound "bd"
# cutoff "40"
#

d1 $ sound "flick sid can metal future gabba sn mouth co gretsch mt arp h cp"
d1 $ sound "cr newnotes bass crow hc tabla bass0 hh bass1 bass2 oc bass3 ho"
d1 $ sound "odx diphone2 house off ht tink perc bd industrial pluck trump"
d1 $ sound "printshort jazz voodoo birds3 procshort blip drum jvbass psr"
d1 $ sound "wobble drumtraks koy rave bottle kurt latibro rm sax lighter lt"
d1 $ sound "arpy feel less stab ul"

d1 $ sound "[bd bd bd, sd cp sd cp]"
hush
d1 $ sound "bd/2"
d1 $ sound "bd bd*2 bd*2 bd*2"

d2 $ every 4 rev (sound "[bd sn]*2 cp")
d2 $ (sound "[bd sn]*2 cp")

d1 silence
d3 silence
d2 silence

d1 $ fastcat [sound "bd sn:2" # vowel "[a o]/2",
              sound "casio casio:1 casio:2*2"
             ]

d1 $ jux (# accelerate "-0.1") $ s "supermandolin*8" # midinote "[80!6 78]/8"
             # sustain "1 0.25 2 1"

d1 $ sound (brak "[bd*2] [sn*5]")

d1 $ s "super808 supersnare" # n (irand 5)
  # voice "0.2" # decay "[2 0.5]/4" # accelerate "-0.1" # sustain "0.5" # speed "[0.5 2]/4"

d1 $ sound (density 2 "bd sn kurt") # density 3 (vowel "a e o")

d3 $ sound "{~ ~ ~ ~, arpy bass2 drum notes can}"

d3 silence


{-----------------_-----------------_-----------------_-----------------}

d3 $ sound "hh27:10 hh hh:1"
# default beat to 1bps

bps 1

d1 $ sound "fire"
hush



{-----------------_-----------------_-----------------_-----------------}


silence d2
d1 $ sound "[if/2 ~ ~ if/2 ~ ~ if/2 ~ ]"

d2 $ sound "[if/3 ~ ~ if/3 ~ ~ if/3 ~ ]"

d3 $ sound "[ifdrumd/2 ifdrums/3 ifdrums/3 ifdrums/2 ifdrums/4 ifdrums/3 ifdrums/2 ifdrums/3]"


{-----------------_-----------------_-----------------_-----------------}

Bjorklund

d1 $ sound "bd(5,8)"

d1 $ e 5 8 $ sound "bd"

d1 $ sound "bd(3,8) sn*2"

d1 $ sound "bd(3,8) sn(5,8)"

d1 $ sound "bd(5,8,2)"


d1 $ e 3 8 $ sound "bd*2 [sn cp]"


d1 $ sound "bd([5 3]/2,8)"

d2 $ sound "hh / sn"

hush

d1 $ sound "bd(2,5)" -- A thirteenth century Persian rhythm called Khafif-e-ramal.
d1 $ sound "bd(3,4)" -- The archetypal pattern of the Cumbia from Colombia, as well as a Calypso rhythm from Trinidad.
d1 $ sound "bd(3,5,2)" -- Another thirteenth century Persian rhythm by the name of Khafif-e-ramal, as well as a Rumanian folk-dance rhythm.
d1 $ sound "bd(3,7)" -- A Ruchenitza rhythm used in a Bulgarian folk-dance.
d1 $ sound "bd(3,8)" -- The Cuban tresillo pattern.
d1 $ sound "bd(4,7)" -- Another Ruchenitza Bulgarian folk-dance rhythm.
d1 $ sound "bd(4,9)" -- The Aksak rhythm of Turkey.
d1 $ sound "bd(4,11)" -- The metric pattern used by Frank Zappa in his piece titled Outside Now.
d1 $ sound "bd(5,6)" -- Yields the York-Samai pattern, a popular Arab rhythm.
d1 $ sound "bd(5,7)" -- The Nawakhat pattern, another popular Arab rhythm.
d1 $ sound "bd(5,8)" -- The Cuban cinquillo pattern.
d1 $ sound "bd(5,9)" -- A popular Arab rhythm called Agsag-Samai.
d1 $ sound "bd(5,11)" -- The metric pattern used by Moussorgsky in Pictures at an Exhibition.
d1 $ sound "bd(5,12)" -- The Venda clapping pattern of a South African childrenâ€™s song.
d1 $ sound "bd(5,16)" -- The Bossa-Nova rhythm necklace of Brazil.
d1 $ sound "bd(7,8)" -- A typical rhythm played on the Bendir (frame drum).
d1 $ sound "bd(7,12)" -- A common West African bell pattern.
d1 $ sound "bd(7,16,14)" -- A Samba rhythm necklace from Brazil.
d1 $ sound "bd(9,16)" -- A rhythm necklace used in the Central African Republic.
d1 $ sound "bd(11,24,14)" -- A rhythm necklace of the Aka Pygmies of Central Africa.
d1 $ sound "bd(13,24,5)" -- Another rhythm necklace of the Aka Pygmies of the upper Sangha.3

d1 $ every 4 (slow 2) $ sound "bd hh sn hh"
d1 $ sound "[bd*2 hh sn hh]"
d2 $ sound "[bd hh sn*2 hh]"

d1 $ slow 2 $ sound "hh*16" # pan sine1

d1 silence

hush

d3  $ every 8 (const $ sound "hh hh hh" # nudge "[0 0.04]*4")
    $ every 4 ( (# delay "0.25") . (# delaytime "0.5") .  (# room "0.25") .  (# delayfeedback "0.5") )
    $ stack[ sound "sn:6(3,8)"
    # speed "[~ 1.5 ~ 2]/3]" # room "0.03", every 4 (const $ sound "bd:7(2,8)") $ sound "bd:8(3,8)", sound "hh*8?"]


d2 $ every 8 (const $ slowcat [sound "hh hh hh", sound "mt", sound "hh*4", sound "mt:2*4"] # nudge "[0 0.04]*4")
   $ every 4 ( (# delay "0.25") . (# delaytime "0.5") .  (# room "0.25") .  (# delayfeedback "0.5") )
   $ stack[ sound "sn:3(3,8)"
   # speed "[~ 1.5 ~ 2]/3]" # room "0.03", every 4 (const $ sound "bd:7(2,8)") $ sound "bd:8(3,8)", sound "hh*8?"]

{-----------------_-----------------_-----------------_-----------------}

Guy - haskell tidal tutorial

:t 'a'
:t 1

let str = "Hello , HAckspace!" :: String
:t str


:t (+)


--Numa => a -> a -> a

:t sound
:t sound "bn sn"

:t d1
--ParamPattern -> IO ()

sound "bd sn" :: ParamPattern
d1 (sound "bd sn")

:t silence
Silence :: Pattern a

TLDR types
Type classes

somemats :: Int -> Int
somemaths a = (a + 1) * 2

somemaths 2 * 3 # notice that about the precedence of function

#what the dollar does?

:t ($)


-------------- My function ---------------------

mysum :: Integer -> Integer -> Integer -> Integer
mysum a b c = a + b + c

mysum 3 3 3



:t mysum


:t slow
:t every

-------------- Currying ---------------------

#Giving a function to few arguments is fine. It will return another function


{-----------------_-----------------_-----------------_-----------------}

Evan - doing an AV performance w/ a backend in Processing

@pixelpusher

Editor: uses vim

Commands
colormode
gsmode
imgmode

definition of different scales

#check github

uses jux (rev) iter sometimes chop
